
C++ Language

class / struct

for (int v : g[u]) range-based for (& const&)

PII p = f(); int a = p.first, b = p.second;
auto [a, b] = f();
vector<vector<PII>> g;
for (auto [v, w] : g[u]) {}
map<int, int> ma;
for (auto [key, value] : ma) {}

lambda -> function
[] -> capture list
() -> argument list
-> type -> return type (optional)
{} -> function body

  -> closure
     funtion stateless

  -> bool check(vector<int> vec) -> > C
  -> capture by value = by reference &
  auto f = [=, &a, &b](){}  
  auto f = [&, c, d](){}

string operation!

STL : 
algorithm : 
sort -> inc dec PII vector array struct
     -> sort(vec.rbegin(), vec.rend()); dec
unique -> 1 3 3 5 5 -> 1 3 5 x x 
       -> 1 2 2 2 3 3 2 2 -> 1 2 3 2 x x x x
lower_bound -> first place a[p] >= C. earliest insert pos
upper_bound -> first place a[p] > C. latest insert pos
  -> lower_bound(vec.begin(), vec.end(), C)
  -> se.lower_bound(C);

next_permutation() prev_

fill(vec.begin(), vec.end(), C) <- vec = vector<int>(n, C)

iota(vec.begin(), vec.end(), start) 
for (int i = 0; i < n; i++) uf[i] = i;
iota(uf.begin(), uf.end(), 0);

rotate(vec.begin(), vec.begin() + k, vec.end());
rotate a[k] -> a[0]   0 1 2 3 4 5 -> k = 3, 3 4 5 0 1 2
?? right rotate

nth_element(vec.begin(), vec.begin() + k, vec.end()); 
(assume you sort the vec, the elememt at k-th)
5 7 2 3 1

0 1 2 3 4
    3
nth_element(vec.begin(), vec.begin() + 2, vec.end()); -> O(n)

max_element(vec.begin(), vec.end()) -> it of the max element
it -> pos value
it - vec.begin()


Container:
vector<>
queue<>
priority_queue<>
deque<>
stack<>
map<>
pair<>

set<>
unordered_set<>
unordered_map<>
list<>
tuple<>, array<>, multiset<>, bitset<>